[gd_resource type="VisualShader" load_steps=13 format=3 uid="uid://d2rmih505ogyx"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_sl7qe"]
parameter_name = "mixBrightness"
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pop0i"]
size = Vector2(363.946, 219.622)
expression = "color = mix(input0 * input1, input0 , input2);"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_hufbw"]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_mhanj"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_ldwx0"]
parameter_name = "Tex_0"
texture_repeat = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_un7sg"]
input_name = "color"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_uptoq"]
size = Vector2(363.946, 219.622)
expression = "color = input0 * input1;"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_h4uj5"]
parameter_name = "AmbientColor"
default_value_enabled = true

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pdq2v"]
size = Vector2(363.946, 219.622)
expression = "color = input0 * input1;"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_oq4tf"]
size = Vector2(320, 240)
expression = "if(LIGHT_IS_DIRECTIONAL)
	output = input + intensity * vec3(ATTENUATION - 1.0);
else
	output = input + clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION * LIGHT_COLOR;
"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ht0xn"]
input_name = "diffuse"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_d6obo"]
parameter_name = "ShadowIntensity"
hint = 1
default_value_enabled = true

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D Tex_0 : repeat_enable;
uniform vec4 AmbientColor : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);
uniform float mixBrightness = 0.5;
uniform float ShadowIntensity : hint_range(0, 1) = 0;



void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


	vec4 n_out2p0;
// Texture2D:2
	n_out2p0 = texture(Tex_0, n_out3p0);


// Input:5
	vec4 n_out5p0 = COLOR;


	vec4 n_out7p0;
// Expression:7
	n_out7p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		n_out7p0 = n_out2p0 * n_out5p0;
	}


// ColorParameter:8
	vec4 n_out8p0 = AmbientColor;


	vec4 n_out9p0;
// Expression:9
	n_out9p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		n_out9p0 = n_out7p0 * n_out8p0;
	}


// FloatParameter:10
	float n_out10p0 = mixBrightness;


	vec4 n_out11p0;
// Expression:11
	n_out11p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		n_out11p0 = mix(n_out7p0 * n_out9p0, n_out7p0 , n_out10p0);
	}


// Output:0
	ALBEDO = vec3(n_out7p0.xyz);
	EMISSION = vec3(n_out11p0.xyz);


}

void light() {
// Input:3
	vec3 n_out3p0 = DIFFUSE_LIGHT;


// FloatParameter:4
	float n_out4p0 = ShadowIntensity;


	vec3 n_out2p0;
// Expression:2
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	{
		if(LIGHT_IS_DIRECTIONAL)
			n_out2p0 = n_out3p0 + n_out4p0 * vec3(ATTENUATION - 1.0);
		else
			n_out2p0 = n_out3p0 + clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION * LIGHT_COLOR;
		
	}


// Output:0
	DIFFUSE_LIGHT = n_out2p0;


}
"
graph_offset = Vector2(-487.986, 123.115)
nodes/vertex/0/position = Vector2(640, 140)
nodes/fragment/0/position = Vector2(2460, 140)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_hufbw")
nodes/fragment/2/position = Vector2(340, 80)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_mhanj")
nodes/fragment/3/position = Vector2(-80, 80)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture2DParameter_ldwx0")
nodes/fragment/4/position = Vector2(-80, 160)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_un7sg")
nodes/fragment/5/position = Vector2(-80, 480)
nodes/fragment/7/node = SubResource("VisualShaderNodeExpression_uptoq")
nodes/fragment/7/position = Vector2(580, 120)
nodes/fragment/7/size = Vector2(363.946, 219.622)
nodes/fragment/7/input_ports = "0,5,input0;1,5,input1;"
nodes/fragment/7/output_ports = "0,5,color;"
nodes/fragment/7/expression = "color = input0 * input1;"
nodes/fragment/8/node = SubResource("VisualShaderNodeColorParameter_h4uj5")
nodes/fragment/8/position = Vector2(740, 520)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_pdq2v")
nodes/fragment/9/position = Vector2(1160, 500)
nodes/fragment/9/size = Vector2(363.946, 219.622)
nodes/fragment/9/input_ports = "0,5,input0;1,5,input1;"
nodes/fragment/9/output_ports = "0,5,color;"
nodes/fragment/9/expression = "color = input0 * input1;"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatParameter_sl7qe")
nodes/fragment/10/position = Vector2(1380, 880)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_pop0i")
nodes/fragment/11/position = Vector2(1780, 360)
nodes/fragment/11/size = Vector2(363.946, 219.622)
nodes/fragment/11/input_ports = "0,5,input0;1,5,input1;2,0,input2;"
nodes/fragment/11/output_ports = "0,5,color;"
nodes/fragment/11/expression = "color = mix(input0 * input1, input0 , input2);"
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 2, 7, 0, 0, 0, 2, 0, 7, 0, 5, 0, 7, 1, 7, 0, 9, 0, 8, 0, 9, 1, 7, 0, 11, 0, 9, 0, 11, 1, 10, 0, 11, 2, 11, 0, 0, 5)
nodes/light/2/node = SubResource("VisualShaderNodeExpression_oq4tf")
nodes/light/2/position = Vector2(-160, 100)
nodes/light/2/size = Vector2(320, 240)
nodes/light/2/input_ports = "0,4,input;1,0,intensity;"
nodes/light/2/output_ports = "0,4,output;"
nodes/light/2/expression = "if(LIGHT_IS_DIRECTIONAL)
	output = input + intensity * vec3(ATTENUATION - 1.0);
else
	output = input + clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION * LIGHT_COLOR;
"
nodes/light/3/node = SubResource("VisualShaderNodeInput_ht0xn")
nodes/light/3/position = Vector2(-520, 140)
nodes/light/4/node = SubResource("VisualShaderNodeFloatParameter_d6obo")
nodes/light/4/position = Vector2(-500, 260)
nodes/light/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1)
